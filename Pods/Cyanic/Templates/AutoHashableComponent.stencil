// sourcery:file:AutoHashableComponent+{% if argument.project %}{{ argument.project }}{% else %}Cyanic{%endif %}.swift
// swiftlint:disable all
{% macro combineVariableHashes variables %}
{% for variable in variables where variable.readAccess != "private" and variable.readAccess != "fileprivate" %}
{% if not variable.annotations.skipHashing %}
        {% if variable.isStatic %}type(of: self).{% else %}self.{% endif %}{{ variable.name }}.hash(into: &hasher)
{% endif %}
{% endfor %}
{% endmacro %}
// MARK: - AutoHashableComponent
{% for type in types.types|!enum where type|annotated:"AutoHashableComponent" %}
{% if argument.isFramework == false and type.annotations.isFrameworkComponent %}
{% else %}
// MARK: - {{ type.annotations.Component }} AutoHashableComponent
extension {{ type.annotations.Component }}: Hashable {
    {{ type.accessLevel }}{% if type.based.NSObject or type.supertype.implements.AutoHashableComponent or type.supertype|annotated:"AutoHashableComponent" or type.supertype.based.Hashable %} override{% endif %} func hash(into hasher: inout Hasher) {
        {% if type.based.NSObject or type.supertype.implements.AutoHashableComponent or type.supertype|annotated:"AutoHashableComponent" or type.supertype.based.Hashable %}
        super.hash(into: hasher)
        {% endif %}
        {% if not type.kind == "protocol" %}
        {% call combineVariableHashes type.storedVariables %}
        {% else %}
        {% call combineVariableHashes type.allVariables %}
        {% endif %}
    }
}
{% endif %}
{% endfor %}
// sourcery:end
