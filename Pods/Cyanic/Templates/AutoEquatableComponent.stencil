// sourcery:file:AutoEquatableComponent+{% if argument.project %}{{ argument.project }}{% else %}Cyanic{%endif %}.swift
// swiftlint:disable all
fileprivate func compareOptionals<T>(lhs: T?, rhs: T?, compare: (_ lhs: T, _ rhs: T) -> Bool) -> Bool {
    switch (lhs, rhs) {
        case let (lValue?, rValue?):
            return compare(lValue, rValue)
        case (nil, nil):
            return true
        default:
            return false
    }
}

fileprivate func compareArrays<T>(lhs: [T], rhs: [T], compare: (_ lhs: T, _ rhs: T) -> Bool) -> Bool {
    guard lhs.count == rhs.count else { return false }
    for (idx, lhsItem) in lhs.enumerated() {
        guard compare(lhsItem, rhs[idx]) else { return false }
    }

    return true
}

{% macro compareVariables variables %}
    {% for variable in variables where variable.readAccess != "private" and variable.readAccess != "fileprivate" %}{% if not variable.annotations.skipEquality %}guard {% if not variable.isOptional %}{% if not variable.annotations.arrayEquality %}lhs.{{ variable.name }} == rhs.{{ variable.name }}{% else %}compareArrays(lhs: lhs.{{ variable.name }}, rhs: rhs.{{ variable.name }}, compare: ==){% endif %}{% else %}compareOptionals(lhs: lhs.{{ variable.name }}, rhs: rhs.{{ variable.name }}, compare: ==){% endif %} else { return false }{% endif %}
    {% endfor %}
{% endmacro %}
// MARK: - AutoEquatableComponent
{% for type in types.types|!enum where type|annotated:"AutoEquatableComponent" %}
{% if argument.isFramework == false and type.annotations.isFrameworkComponent %}
{% else %}
// MARK: - {{ type.annotations.Component }} AutoEquatableComponent
extension {{ type.annotations.Component }}: Equatable {}
{{ type.accessLevel }} func == (lhs: {{ type.annotations.Component }}, rhs: {{ type.annotations.Component }}) -> Bool {
    {% if not type.kind == "protocol" %}
    {% call compareVariables type.storedVariables %}
    {% else %}
    {% call compareVariables type.allVariables %}
    {% endif %}
    return true
}
{% endif %}
{% endfor %}
// sourcery:end
